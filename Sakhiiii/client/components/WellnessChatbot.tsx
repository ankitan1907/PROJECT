import { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Bot, 
  Send, 
  Mic, 
  MicOff, 
  Volume2, 
  VolumeX, 
  Heart, 
  Calendar,
  Pill,
  Smile,
  AlertCircle,
  Sparkles,
  MessageCircle,
  RefreshCw
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { useLanguage } from '@/contexts/LanguageContext';

interface ChatMessage {
  id: string;
  type: 'user' | 'bot';
  message: string;
  timestamp: Date;
  category?: 'period' | 'health' | 'mood' | 'general';
  suggestions?: string[];
}

interface WellnessDatabase {
  [key: string]: {
    [language: string]: {
      responses: string[];
      suggestions?: string[];
    };
  };
}

// Fun and gamified responses for variety
const funResponses = {
  'en': [
    "You're absolutely glowing today! тЬи What's your wellness question?",
    "Hey beautiful soul! ЁЯМ╕ I'm here to help you shine brighter!",
    "Welcome to your wellness adventure! ЁЯОЙ Ready to level up your health?",
    "You're doing amazing, gorgeous! ЁЯТк What can I help you with today?",
    "Bestie, you're stronger than you know! ЁЯТХ How can I support you?",
    "Queen energy activated! ЁЯСС Let's tackle your wellness goals together!",
    "You're writing your own success story! ЁЯУЦ What chapter are we working on today?",
    "Sparkle mode: ON! тЬи Your wellness journey is inspiring!",
    "You're a warrior princess! тЪФя╕П Let's conquer any health concerns!",
    "Goddess vibes only! ЁЯМЩ Your body is a temple - let's take care of it!"
  ],
  'hi': [
    "рдЖрдЬ рдЖрдк рдмрд╣реБрдд рдЦреВрдмрд╕реВрд░рдд рд▓рдЧ рд░рд╣реА рд╣реИрдВ! тЬи рдЖрдкрдХя┐╜я┐╜ рдХрд▓реНрдпрд╛рдг рдкреНрд░рд╢реНрди рдХреНрдпрд╛ рд╣реИ?",
    "рд╣реЗ рд╕реБрдВрджрд░ рдЖрддреНрдорд╛! ЁЯМ╕ рдореИрдВ рдпрд╣рд╛рдБ рдЖрдкрдХреЛ рдФрд░ рдЪрдордХрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╣реВрдБ!",
    "рдЖрдкрдХреЗ рдХрд▓реНрдпрд╛рдг рд╕рд╛рд╣рд╕рд┐рдХ рдХрд╛рд░реНрдп рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯОЙ рдЕрдкрдиреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЛ рдмреЗрд╣рддрд░ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИрдВ?",
    "рдЖрдк рдЕрджреНрднреБрдд рдХрд╛рдо рдХрд░ рд░рд╣реА рд╣реИрдВ, рд╕реБрдВрджрд░! ЁЯТк рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддреА рд╣реВрдБ?",
    "рдмреЗрд╕реНрдЯреА, рдЖрдк рдЬрд┐рддрдирд╛ рд╕реЛрдЪрддреА рд╣реИрдВ рдЙрд╕рд╕реЗ рдХрд╣реАрдВ рдордЬрдмреВрдд рд╣реИрдВ! ЁЯТХ рдореИрдВ рдЖрдкрдХрд╛ рдХреИрд╕реЗ рд╕рд╛рде рджреЗ рд╕рдХрддреА рд╣реВрдБ?"
  ],
  'te': [
    "р░Ир░░р▒Лр░Ьр▒Б р░ор▒Ар░░р▒Б р░Ър░╛р░▓р░╛ р░Ер░Вр░жр░Вр░Чр░╛ р░Хр░ир░┐р░кр░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░░р▒Б! тЬи р░ор▒А р░Жр░░р▒Лр░Чр▒Нр░п р░кр▒Нр░░р░╢р▒Нр░и р░Пр░ор░┐р░Яр░┐?",
    "р░╣р▒З р░Ер░Вр░жр░ор▒Ир░и р░Жр░др▒Нр░о! ЁЯМ╕ р░ор▒Ар░░р▒Б р░ор░░р░┐р░Вр░д р░кр▒Нр░░р░Хр░╛р░╢р░╡р░Вр░др░Вр░Чр░╛ р░Йр░Вр░бр░Яр░╛р░ир░┐р░Хр░┐ р░ир▒Зр░ир▒Б р░Зр░Хр▒Нр░Хр░б р░Йр░ир▒Нр░ир░╛р░ир▒Б!",
    "р░ор▒А р░Жр░░р▒Лр░Чр▒Нр░п р░╕р░╛р░╣р░╕р░╛р░ир░┐я┐╜я┐╜р░┐ р░╕р▒Нр░╡р░╛р░Чр░др░В! ЁЯОЙ р░ор▒А р░Жр░░р▒Лр░Чр▒Нр░пр░╛р░ир▒Нр░ир░┐ р░ор▒Жр░░р▒Бр░Чр▒Бр░кр░░р░Ър▒Бр░Хр▒Лр░╡р░бр░╛р░ир░┐р░Хр░┐ р░╕р░┐р░жр▒Нр░зр░Вр░Чр░╛ р░Йр░ир▒Нр░ир░╛р░░р░╛?",
    "р░ор▒Ар░░р▒Б р░Ер░жр▒Нр░нр▒Бр░др░Вр░Чр░╛ р░Ър▒Зр░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░░р▒Б, р░Ер░Вр░жр░ор▒Ир░ир░╡р░╛р░░р▒Б! ЁЯТк р░Ир░░р▒Лр░Ьр▒Б р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░Ор░▓р░╛ р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б?",
    "р░мр▒Жр░╕р▒Нр░Яр▒А, р░ор▒Ар░░р▒Б р░Ер░ир▒Бр░Хр▒Бр░ир▒Нр░ир░жр░╛р░ир░┐р░Хр░Вр░Яр▒З р░Ър░╛р░▓р░╛ р░мр░▓р░Вр░Чр░╛ р░Йр░ир▒Нр░ир░╛р░░р▒Б! ЁЯТХ р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░Ор░▓р░╛ р░ор░жр▒Нр░жр░др▒Б р░Зр░╡р▒Нр░╡р░Чр░▓р░ир▒Б?"
  ],
  'ta': [
    "роЗройрпНро▒рпБ роирпАроЩрпНроХро│рпН рооро┐роХро╡рпБроорпН роЕро┤роХро╛роХ роЗро░рпБроХрпНроХро┐ро▒рпАро░рпНроХро│рпН! тЬи роЙроЩрпНроХро│рпН роиро▓ройрпН роХрпЗро│рпНро╡ро┐ роОройрпНрой?",
    "ро╣рпЗ роЕро┤роХро╛рой роЖродрпНрооро╛! ЁЯМ╕ роирпАроЩрпНроХро│рпН роЗройрпНройрпБроорпН рокро┐ро░роХро╛роЪрооро╛роХ роЗро░рпБроХрпНроХ роиро╛ройрпН роЗроЩрпНроХрпЗ роЙро│рпНро│рпЗройрпН!",
    "роЙроЩрпНроХро│рпН роиро▓ройрпН роЪро╛роХроЪродрпНродро┐ро▒рпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН! ЁЯОЙ роЙроЩрпНроХро│рпН роЖро░рпЛроХрпНроХро┐ропродрпНродрпИ роорпЗроорпНрокроЯрпБродрпНрод родропро╛ро░ро╛?",
    "роирпАроЩрпНроХро│рпН роЕро▒рпНрокрпБродрооро╛роХ роЪрпЖропрпНродрпБ я┐╜я┐╜я┐╜рпКрогрпНроЯро┐ро░рпБроХрпНроХро┐ро▒рпАро░рпНроХро│рпН, роЕро┤роХро╛ройро╡ро░рпН! ЁЯТк роЗройрпНро▒рпБ роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?",
    "рокрпЖро╕рпНроЯро┐, роирпАроЩрпНроХро│рпН роиро┐ройрпИрокрпНрокродрпИ ро╡ро┐роЯ рооро┐роХро╡рпБроорпН ро╡ро▓ро┐роорпИропро╛ройро╡ро░рпН! ЁЯТХ роиро╛ройрпН роЙроЩрпНроХро│рпИ роОрокрпНрокроЯро┐ роЖродро░ро┐роХрпНроХ роорпБроЯро┐ропрпБроорпН?"
  ],
  'kn': [
    "р▓Зр▓Вр▓жр│Б р▓ир│Ар▓╡р│Б р▓др│Бр▓Вр▓мр▓╛ р▓╕р│Бр▓Вр▓жр▓░р▓╡р▓╛р▓Чр▓┐ р▓Хр▓╛р▓гр│Бр▓др│Нр▓др▓┐р▓жр│Нр▓жр│Ар▓░р▓┐! тЬи р▓ир▓┐р▓ор│Нр▓о р▓Жр▓░р│Лр▓Чр│Нр▓п р▓кр│Нр▓░р▓╢р│Нр▓ир│Ж р▓Пр▓ир│Б?",
    "р▓╣р│З р▓╕р│Бр▓Вр▓жр▓░ р▓Жр▓др│Нр▓о! ЁЯМ╕ р▓ир│Ар▓╡р│Б р▓Зр▓ир│Нр▓ир▓╖р│Нр▓Яр│Б р▓кр│Нр▓░р▓Хр▓╛р▓╢р▓ор▓╛р▓ир▓╡р▓╛р▓Чр▓┐р▓░р▓▓р│Б р▓ир▓╛р▓ир│Б р▓Зр▓▓р│Нр▓▓р▓┐р▓жр│Нр▓жр│Зр▓ир│Ж!",
    "р▓ир▓┐р▓ор│Нр▓о р▓Жр▓░р│Лр▓Чр│Нр▓п р▓╕р▓╛р▓╣р▓╕р│Лр▓жр│Нр▓пр▓ор▓Хр│Нр▓Хр│Ж р▓╕р│Нр▓╡р▓╛р▓Чр▓д! ЁЯОЙ р▓ир▓┐р▓ор│Нр▓о р▓Жр▓░р│Лр▓Чр│Нр▓пр▓╡р▓ир│Нр▓ир│Б р▓╕р│Бр▓зр▓╛р▓░р▓┐р▓╕р▓▓р│Б р▓╕р▓┐р▓жр│Нр▓зр▓░р▓┐р▓жр│Нр▓жр│Ар▓░р▓╛?",
    "р▓ир│Ар▓╡р│Б р▓Ер▓жр│Нр▓нр│Бр▓др▓╡р▓╛р▓Чр▓┐ р▓ор▓╛р▓бр│Бр▓др│Нр▓др▓┐р▓жр│Нр▓жр│Ар▓░р▓┐, р▓╕р│Бр▓Вр▓жр▓░р▓╡р▓╛р▓Чр▓┐! ЁЯТк р▓Зр▓Вр▓жр│Б р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор▓Чр│Ж р▓╣р│Зр▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓мр▓╣р│Бр▓жр│Б?",
    "р▓мр│Жр▓╕р│Нр▓Яр▓┐, р▓ир│Ар▓╡р│Б р▓Ер▓Вр▓жр│Бр▓Хр│Кр▓Вр▓бр▓┐р▓░р│Бр▓╡р│Бр▓жр▓Хр│Нр▓Хр▓┐р▓Вр▓д р▓╣р│Жр▓Ър│Нр▓Ър│Б р▓мр▓▓р▓╢р▓╛р▓▓р▓┐! ЁЯТХ р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор▓Чр│Ж р▓╣р│Зр▓Чр│Ж р▓мр│Жр▓Вр▓мр▓▓ р▓ир│Ар▓бр▓мр▓╣р│Бр▓жр│Б?"
  ]
};

const wellnessKnowledge: WellnessDatabase = {
  // Period related
  'period_pain': {
    'en': {
      responses: [
        "Period cramps are normal! Try applying heat, gentle exercise, or over-the-counter pain relievers. If pain is severe, consult a doctor.",
        "For period pain relief: warm compress, yoga poses like child's pose, stay hydrated, and consider magnesium supplements."
      ],
      suggestions: ["Heat therapy tips", "Yoga for periods", "When to see a doctor"]
    },
    'hi': {
      responses: [
        "рдкреАрд░рд┐рдпрдбреНрд╕ рдореЗрдВ рджрд░реНрдж рд╕рд╛рдорд╛рдиреНрдп рд╣реИ! рдЧрд░реНрдо рд╕рд┐рдХрд╛рдИ, рд╣рд▓реНрдХреА рдПрдХреНрд╕рд░рд╕рд╛рдЗрдЬ, рдпрд╛ рджрд╡рд╛ рд▓реЗрдВред рддреЗрдЬрд╝ рджрд░реНрдж рд╣реЛ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВред",
        "рдкреАрд░рд┐рдпрдбреНрд╕ рдХреЗ рджрд░реНрдж рдХреЗ рд▓рд┐рдП: рдЧрд░реНрдо рдкрд╛рдиреА рдХреА рдмреЛрддрд▓, рдпреЛрдЧ, рдкрд╛рдиреА рдкрд┐рдПрдВ, рдФрд░ рдореИрдЧреНрдиреАрд╢рд┐рдпрдо рд╕рдкреНрд▓реАрдореЗрдВрдЯ рд▓реЗрдВред"
      ],
      suggestions: ["рдЧрд░реНрдо рд╕рд┐рдХрд╛рдИ рдХреЗ рддрд░реАрдХреЗ", "рдкреАрд░рд┐рдпрдбреНрд╕ рдХреЗ рд▓рд┐рдП рдпреЛрдЧ", "рдбреЙрдХреНрдЯрд░ рд╕реЗ рдХрдм рдорд┐рд▓реЗрдВ"]
    },
    'te': {
      responses: [
        "р░кр▒Ар░░р░┐р░пр░бр▒Ня┐╜я┐╜я┐╜р▒Н р░ир▒Кр░кр▒Нр░кр░┐ р░╕р░╣р░Ьр░В! р░╡р▒Зр░бр░┐р░ор░┐р░ир░┐, р░др▒Зя┐╜я┐╜р░┐р░Хр░кр░╛р░Яр░┐ р░╡р▒Нр░пр░╛р░пр░╛р░ор░В, р░▓р▒Зр░жр░╛ р░ор░Вр░жр▒Бр░▓р▒Б р░╡р░╛р░бр░Вр░бр░┐. р░др▒Ар░╡р▒Нр░░р░ор▒Ир░др▒З р░╡р▒Ир░жр▒Нр░пр▒Бр░бр░┐р░ир░┐ р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐ред",
        "р░кр▒Ар░░р░┐р░пр░бр▒Н р░ир▒Кр░кр▒Нр░кр░┐р░Хр░┐: р░╡р▒Зр░бр░┐р░ор░┐, р░пр▒Лр░Чр░╛, р░ир▒Ар░░р▒Б р░др░╛р░Чр░Вр░бр░┐, р░ор░░р░┐р░пр▒Б р░ор▒Жр░Чр▒Нр░ир▒Ар░╖р░┐р░пр░В р░╕р░кр▒Нр░▓р░┐р░ор▒Жр░Вр░Яр▒Нр░╕р▒Н р░др▒Ар░╕р▒Бр░Хр▒Лр░Вр░бр░┐ред"
      ],
      suggestions: ["р░╡р▒Зр░бр░┐р░ор░┐ р░Ър░┐р░Хр░┐р░др▒Нр░╕", "р░кр▒Ар░░р░┐р░пр░бр▒Нр░╕р▒Н р░Хр▒Лр░╕р░В р░пр▒Лр░Чр░╛", "р░╡р▒Ир░жр▒Нр░пр▒Бр░бр░┐р░ир░┐ р░Ор░кр▒Нр░кр▒Бр░бр▒Б р░Хр░▓р░╡р░╛р░▓р░┐"]
    },
    'ta': {
      responses: [
        "рооро╛родро╡ро┐роЯро╛ропрпН ро╡ро▓ро┐ роЗропро▓рпНрокро╛ройродрпБ! ро╡рпЖрокрпНрокроорпН, ро▓рпЗроЪро╛рой роЙроЯро▒рпНрокропро┐ро▒рпНроЪро┐, роЕро▓рпНро▓родрпБ рооро░рпБроирпНродрпБроХро│рпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН. роХроЯрпБроорпИропро╛рой ро╡ро▓ро┐ роЗро░рпБроирпНродро╛ро▓рпН рооро░рпБродрпНродрпБро╡ро░рпИ роЕрогрпБроХро╡рпБроорпН.",
        "рооро╛родро╡ро┐роЯро╛ропрпН ро╡ро▓ро┐роХрпНроХрпБ: ро╡рпЖрокрпНрок роЪро┐роХро┐роЪрпНроЪрпИ, ропрпЛроХро╛, родрогрпНрогрпАро░рпН роХрпБроЯро┐роХрпНроХро╡рпБроорпН, роорпЖроХрпНройрпАроЪро┐ропя┐╜я┐╜рпН роЪя┐╜я┐╜я┐╜рпНро│ро┐роорпЖрогрпНроЯрпНро╕рпН роОроЯрпБродрпНродрпБроХрпНроХрпКро│рпНро│ро╡рпБроорпН."
      ],
      suggestions: ["ро╡рпЖрокрпНрок роЪро┐роХро┐роЪрпНроЪрпИ роорпБро▒рпИроХро│рпН", "рооро╛родро╡ро┐роЯро╛ропрпНроХрпНроХро╛рой ропрпЛроХро╛", "рооро░рпБродрпНродрпБро╡ро░рпИ роОрокрпНрокрпЛродрпБ роЪроирпНродро┐роХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН"]
    }
  },
  'irregular_periods': {
    'en': {
      responses: [
        "Irregular periods can be due to stress, weight changes, or hormones. Track your cycle and consult a gynecologist if it persists.",
        "Common causes of irregular periods: stress, PCOS, thyroid issues, or lifestyle changes. Keep a period diary to track patterns."
      ],
      suggestions: ["Period tracking apps", "Lifestyle changes", "When to worry"]
    },
    'hi': {
      responses: [
        "рдЕрдирд┐рдпрдорд┐рдд рдкреАрд░рд┐рдпрдбреНрд╕ рддрдирд╛рд╡, рд╡рдЬрди, рдпрд╛ рд╣рд╛рд░реНрдореЛрди рдХреЗ рдХрд╛рд░рдг рд╣реЛ я┐╜я┐╜рдХрддреЗ рд╣реИрдВред рдЕрдкрдирд╛ рд╕рд╛рдЗрдХрд▓ рдЯреНрд░реИрдХ рдХрд░реЗрдВ рдФрд░ рдЧрд╛рдпрдиреЗрдХреЛрд▓реЙрдЬрд┐рд╕реНрдЯ рд╕реЗ рдорд┐рд▓реЗрдВред",
        "рдЕрдирд┐рдпрдорд┐рдд рдкреАрд░рд┐рдпрдбреНрд╕ рдХреЗ рдХрд╛рд░рдг: рддрдирд╛рд╡, PCOS, рдерд╛рдпрд░реЙрдЗрдб рд╕рдорд╕реНрдпрд╛рдПрдВред рдкреАрд░рд┐рдпрдб я┐╜я┐╜я┐╜рд╛рдпрд░реА рд░рдЦреЗрдВред"
      ],
      suggestions: ["рдкреАрд░рд┐рдпрдб рдЯреНрд░реИрдХрд┐рдВрдЧ рдРрдкреНрд╕", "рдЬреАрд╡рдирд╢реИрд▓реА рдореЗрдВ рдмрджрд▓рд╛рд╡", "рдХрдм рдЪрд┐рдВрддрд╛ рдХрд░реЗрдВ"]
    },
    'te': {
      responses: [
        "р░Ер░ир░┐р░пр░ор░┐р░д р░кр▒Ар░░р░┐р░пр░бр▒Нр░╕р▒Н р░Тр░др▒Нр░др░┐р░бр░┐, р░мр░░р▒Бр░╡р▒Б р░ор░╛р░░р▒Нр░кр▒Бр░▓р▒Б, р░▓р▒Зр░жр░╛ р░╣р░╛р░░р▒Нр░ор▒Лр░ир▒Нр░▓ р░╡р░▓р▒Нр░▓ р░Хр░╛р░╡р░Ър▒Нр░Ър▒Б. р░ор▒А р░Ър░Хр▒Нр░░р░╛р░ир▒Нр░ир░┐ р░Яр▒Нр░░р░╛р░Хр▒Н р░Ър▒Зр░╕р░┐ р░Чр▒Ир░ир░Хр░╛р░▓р░Ьр░┐р░╕р▒Нр░Яр▒НтАМр░ир░┐ р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐ред",
        "р░Ер░ир░┐р░пр░ор░┐р░д р░кр▒Ар░░р░┐р░пр░бр▒Нр░╕р▒Н р░Хр░╛р░░р░гр░╛р░▓р▒Б: р░Тр░др▒Нр░др░┐р░бр░┐, PCOS, р░ер▒Ир░░р░╛р░пр░┐р░бр▒Н р░╕р░ор░╕р▒Нр░пр░▓р▒Б. р░кр▒Ар░░р░┐р░пр░бр▒Н р░бр▒Ир░░р▒А р░Йр░Вр░Ър░Вр░бр░┐ред"
      ],
      suggestions: ["р░кр▒Ар░░р░┐р░пр░бр▒Н р░Яр▒Нр░░р░╛р░Хр░┐р░Вр░Чр▒Н р░пр░╛р░кр▒Нр░╕р▒Н", "р░Ьр▒Ар░╡р░ир░╢р▒Ир░▓р░┐ р░ор░╛р░░р▒Нр░кр▒Бр░▓р▒Б", "р░Ор░кр▒Нр░кр▒Бр░бр▒Б р░Жр░Вр░жр▒Лр░│р░и р░Ър▒Жр░Вр░жр░╛р░▓р░┐"]
    },
    'ta': {
      responses: [
        "роТро┤рпБроЩрпНроХро▒рпНро▒ рооро╛родро╡ро┐роЯро╛ропрпН роорой роЕро┤рпБродрпНродроорпН, роОроЯрпИ рооро╛ро▒рпНро▒роЩрпНроХро│рпН, роЕро▓рпНро▓родрпБ ро╣ро╛я┐╜я┐╜рпНроорпЛройрпНроХро│рпН роХро╛ро░рогрооро╛роХ роЗро░рпБроХя┐╜я┐╜роХро▓ро╛роорпН. роЙроЩрпНроХро│рпН роЪрпБро┤ро▒рпНроЪро┐ропрпИроХрпН роХрогрпНроХро╛рогро┐родрпНродрпБ роороХро│ро┐ро░рпН рооро░рпБродрпНродрпБро╡ро░рпИ роЕрогрпБроХро╡рпБроорпН.",
        "роТро┤рпБроЩрпНроХро▒рпНро▒ рооро╛родро╡ро┐роЯро╛ропрпН роХро╛ро░рогроЩрпНроХро│рпН: роорой роЕро┤рпБродрпНродроорпН, PCOS, родрпИро░ро╛ропрпНроЯрпБ рокро┐ро░роЪрпНроЪройрпИроХро│рпН. рооро╛родро╡ро┐роЯро╛ропрпН роиро╛роЯрпНроХрпБро▒ро┐рокрпНрокрпБ ро╡рпИроХрпНроХро╡рпБроорпН."
      ],
      suggestions: ["рооро╛родро╡ро┐роЯро╛ропрпН роХрогрпНроХро╛рогро┐рокрпНрокрпБ рокропройрпНрокро╛роЯрпБроХро│рпН", "ро╡ро╛ро┤рпНроХрпНроХрпИ роорпБро▒рпИ рооро╛ро▒рпНро▒роЩрпНроХро│рпН", "роОрокрпНрокрпЛродрпБ роХро╡ро▓рпИрокрпНрокроЯ ро╡рпЗрогрпНроЯрпБроорпН"]
    },
    'kn': {
      responses: [
        "р▓Ер▓ир▓┐р▓пр▓ор▓┐р▓д р▓кр│Ар▓░р▓┐р▓пр▓бр│НтАМр▓Чр▓│р│Б р▓Тр▓др│Нр▓др▓б, р▓др│Вр▓Х р▓мр▓жр▓▓р▓╛р▓╡р▓гр│Жр▓Чр▓│р│Б, р▓Ер▓ер▓╡р▓╛ р▓╣р▓╛р▓░р│Нр▓ор│Лр▓ир│НтАМр▓Чр▓│р▓┐р▓Вр▓жр▓╛р▓Чр▓┐ р▓Жр▓Чр▓мр▓╣р│Бр▓жр│Бред р▓ир▓┐р▓ор│Нр▓о р▓Ър▓Хр│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓Яр│Нр▓░р│Нр▓пр▓╛р▓Хр│Н р▓ор▓╛р▓бр▓┐ р▓ор▓др│Нр▓др│Б р▓Чр│Ир▓ир▓Хр▓╛р▓▓р▓Ьр▓┐р▓╕р│Нр▓Яр│Н р▓Ер▓ир│Нр▓ир│Б р▓╕р▓Вр▓кр▓░р│Нр▓Хр▓┐р▓╕р▓┐ред",
        "р▓Ер▓ир▓┐р▓пр▓ор▓┐р▓д р▓кр│Ар▓░р▓┐р▓пр▓бр│НтАМр▓Чр▓│ р▓Хр▓╛р▓░р▓гр▓Чр▓│р│Б: р▓Тр▓др│Нр▓др▓б, PCOS, р▓ер│Ир▓░р▓╛р▓пр│Нр▓бр│Н р▓╕р▓ор▓╕я┐╜я┐╜р▓пр│Жр▓Чр▓│р│Бред р▓кр│Ар▓░р▓┐р▓пр▓бр│Н р▓бр│Ир▓░р▓┐ р▓Зр▓Яр│Нр▓Яр│Бр▓Хр│Кр▓│р│Нр▓│р▓┐ред"
      ],
      suggestions: ["р▓кр│Ар▓░р▓┐р▓пр▓бр│Н р▓Яр│Нр▓░р│Нр▓пр▓╛р▓Хр▓┐р▓Вр▓Чр│Н р▓Ер▓кр│Нр▓▓р▓┐р▓Хр│Зр▓╢р▓ир│НтАМр▓Чр▓│р│Б", "р▓Ьр│Ар▓╡р▓ир▓╢р│Ир▓▓р▓┐ р▓мр▓жр▓▓р▓╛р▓╡р▓гр│Жр▓Чр▓│р│Б", "р▓пр▓╛р▓╡р▓╛р▓Ч р▓Ър▓┐р▓Вр▓др▓┐р▓╕р▓мр│Зр▓Хр│Б"]
    }
  },
  'mood_swings': {
    'en': {
      responses: [
        "Mood swings during periods are completely normal! Hormonal changes affect emotions. Try deep breathing, journaling, or talking to someone.",
        "PMS mood swings are real! Practice self-care: take warm baths, eat well, exercise gently, and be kind to yourself."
      ],
      suggestions: ["Mood tracking", "Self-care tips", "Breathing exercises"]
    },
    'hi': {
      responses: [
        "рдкреАрд░рд┐рдпрдбреНрд╕ рдХреЗ рджреМрд░рд╛рди рдореВрдб рд╕реНрд╡рд┐рдВрдЧреНрд╕ рдмрд┐рд▓реНрдХреБрд▓ рд╕рд╛рдоя┐╜я┐╜я┐╜рдиреНрдп рд╣реИрдВ! рд╣рд╛рд░реНрдореЛрдирд▓ рдмрджрд▓рд╛рд╡ рд╕реЗ рднрд╛рд╡рдирд╛рдПрдВ рдкреНрд░рднрд╛рд╡рд┐рдд рд╣реЛрддреА рд╣реИрдВред рдЧрд╣рд░реА рд╕рд╛рдВрд╕ рд▓реЗрдВ, рдбрд╛рдпрд░реА рд▓рд┐рдЦреЗрдВред",
        "PMS рдореВрдб рд╕реНрд╡рд┐рдВрдЧреНрд╕ рдЕрд╕рд▓реА рд╣реИрдВ! рд╕реЗрд▓реНрдл-рдХреЗрдпрд░ рдХрд░реЗрдВ: рдЧрд░реНрдо рдкрд╛рдиреА рд╕реЗ рдирд╣рд╛рдПрдВ, рдЕрдЪреНрдЫрд╛ рдЦрд╛рдПрдВ, рд╣рд▓реНрдХреА рдПрдХреНрд╕рд░рд╕рд╛рдЗрдЬ рдХрд░реЗрдВред"
      ],
      suggestions: ["рдореВрдб рдЯреНрд░реИрдХрд┐рдВрдЧ", "рд╕реЗрд▓реНрдл-рдХреЗрдпрд░ рдЯрд┐рдкреНрд╕", "рд╕рд╛рдВрд╕ рдХреА рдПрдХреНрд╕рд░рд╕рд╛рдЗрдЬ"]
    },
    'te': {
      responses: [
        "р░кр▒Ар░░р░┐р░пр░бр▒Нр░╕р▒Н р░╕р░ор░пр░Вр░▓р▒Л р░ор▒Вр░бр▒Н р░╕р▒Нр░╡р░┐р░Вр░Чр▒Нр░╕р▒Н р░кр▒Вр░░р▒Нр░др░┐р░Чр░╛ р░╕р░╣р░Ьр░В! р░╣р░╛р░░р▒Нр░ор▒Лр░ир░▓р▒Н р░ор░╛р░░р▒Нр░кр▒Бр░▓р▒Б р░нр░╛р░╡р░ир░▓р░ир▒Б р░кр▒Нр░░р░нр░╛р░╡р░┐р░др░В р░Ър▒Зр░╕р▒Нр░др░╛р░пр░┐. р░▓р▒Лр░др▒Ир░и р░╢р▒Нр░╡р░╛р░╕ р░др▒Ар░╕р▒Бр░Хр▒Лр░Вр░бр░┐, р░бр▒Ир░░р▒А р░░р░╛р░пр░Вр░бр░┐.",
        "PMS р░ор▒Вр░бр▒Н р░╕р▒Нр░╡р░┐р░Вр░Чр▒Нр░╕р▒Н р░ир░┐р░Ьр░ор▒Ир░ир░╡р░┐! р░╕р▒Жр░▓р▒Нр░лр▒Н-р░Хр▒Зр░░р▒Н р░Ър▒Зр░пр░Вр░бр░┐: р░╡р▒Жр░Ър▒Нр░Ър░ир░┐ р░╕р▒Нр░ир░╛р░ир░В, р░мр░╛р░Чр░╛ р░др░┐р░ир░Вр░бр░┐, р░др▒Зр░▓р░┐р░Хр░кр░╛р░Яр░┐ р░╡р▒Нр░пр░╛р░пр░╛р░ор░В р░Ър▒Зр░пр░Вр░бр░┐."
      ],
      suggestions: ["р░ор▒Вр░бр▒Н р░Яр▒Нр░░р░╛р░Хр░┐р░Вр░Чр▒Н", "р░╕р▒Жр░▓р▒Нр░лр▒Н-р░Хр▒Зр░░р▒Н р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р▒Б", "р░╢р▒Нр░╡р░╛р░╕ р░╡р▒Нр░пр░╛р░пр░╛р░ор░╛р░▓р▒Б"]
    },
    'ta': {
      responses: [
        "рооро╛родро╡ро┐роЯро╛ропрпНроХро│ро┐ройрпН рокрпЛродрпБ рооройроиро┐ро▓рпИ рооро╛ро▒рпНро▒роЩрпНроХро│рпН роорпБро▒рпНро▒ро┐ро▓рпБроорпН роЗропро▓рпНя┐╜я┐╜ро╛ройро╡рпИ! ро╣ро╛ро░рпНроорпЛройрпН рооро╛ро▒рпНро▒роЩрпНроХро│рпН роЙрогро░рпНро╡рпБроХро│рпИ рокро╛родро┐роХрпНроХро┐ройрпНро▒рой. роЖро┤рооро╛роХ роорпВроЪрпНроЪрпБ ро╡ро┐роЯрпБроЩрпНроХро│рпН, роиро╛роЯрпНроХрпБро▒ро┐рокрпНрокрпБ роОро┤рпБродрпБроЩрпНроХро│рпН.",
        "PMS рооройроиро┐ро▓рпИ рооро╛ро▒рпНро▒роЩрпНроХро│рпН роЙрогрпНроорпИропро╛ройро╡рпИ! роЪрпБроп рокро░ро╛рооро░ро┐рокрпНрокрпБ роЪрпЖропрпНропрпБроЩрпНроХро│рпН: роЪрпВроЯро╛рой роХрпБро│ро┐ропро▓рпН, роиро▓рпНро▓ роЙрогро╡рпБ, роорпЖройрпНроорпИропро╛рой роЙроЯро▒рпНрокропро┐ро▒рпНроЪро┐."
      ],
      suggestions: ["рооройроиро┐ро▓рпИ роХрогрпНроХро╛рогро┐рокрпНрокрпБ", "роЪрпБроп рокро░ро╛рооро░ро┐рокрпНрокрпБ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН", "роорпВроЪрпНроЪрпБ рокропро┐ро▒рпНроЪро┐роХро│рпН"]
    },
    'kn': {
      responses: [
        "р▓кр│Ар▓░р▓┐р▓пр▓бр│НтАМр▓Чр▓│ р▓╕р▓ор▓пр▓жр▓▓р│Нр▓▓р▓┐ р▓ор│Вр▓бр│Н р▓╕р│Нр▓╡р▓┐р▓Вр▓Чр│НтАМр▓Чр▓│р│Б р▓╕р▓Вр▓кр│Вр▓░р│Нр▓гр▓╡р▓╛р▓Чр▓┐ р▓╕р▓╛р▓ор▓╛р▓ир│Нр▓п! р▓╣р▓╛р▓░р│Нр▓ор│Лр▓ир▓▓р│Н р▓мр▓жр▓▓р▓╛р▓╡р▓гр│Жр▓Чр▓│р│Б р▓нр▓╛р▓╡р▓ир│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр│Нр▓░р▓нр▓╛р▓╡р▓┐р▓╕р│Бр▓др│Нр▓др▓╡р│Ж. р▓Жр▓│р▓╡р▓╛р▓ж р▓Йр▓╕р▓┐р▓░р│Б р▓др│Жр▓Чр│Жр▓жр│Бр▓Хр│Кр▓│р│Нр▓│р▓┐, р▓бр│Ир▓░р▓┐ р▓мр▓░р│Жр▓пр▓┐р▓░р▓┐ред",
        "PMS р▓ор│Вр▓бр│Н р▓╕р│Нр▓╡р▓┐р▓Вр▓Чр│НтАМр▓Чр▓│р│Б р▓ир▓┐р▓Ьр▓╡р▓╛р▓жр▓╡я┐╜я┐╜! р▓╕р│Нр▓╡р▓пр▓В р▓Жр▓░р│Ир▓Хр│Ж р▓ор▓╛р▓бр▓┐: р▓мр│Жр▓Ър│Нр▓Ър▓Чр▓┐р▓и р▓╕р│Нр▓ир▓╛р▓и, р▓Тр▓│р│Нр▓│р│Жр▓п р▓Жр▓╣р▓╛р▓░, р▓ор│Гр▓жр│Бр▓╡р▓╛р▓ж р▓╡р│Нр▓пр▓╛р▓пр▓╛р▓о."
      ],
      suggestions: ["р▓ор│Вр▓бр│Н р▓Яр│Нр▓░р│Нр▓пр▓╛р▓Хр▓┐р▓Вр▓Чр│Н", "р▓╕р│Нр▓╡р▓пр▓В р▓Жр▓░р│Ир▓Хр│Ж р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б", "р▓Йр▓╕р▓┐р▓░р▓╛р▓Яр▓ж р▓╡р│Нр▓пр▓╛р▓пр▓╛р▓ор▓Чр▓│р│Б"]
    }
  },
  'general_health': {
    'en': {
      responses: [
        "Your health matters! Regular check-ups, balanced nutrition, exercise, and mental well-being are key to a healthy life.",
        "Focus on: 8 hours sleep, 2L water daily, 30 minutes exercise, nutritious meals, and stress management for optimal health."
      ],
      suggestions: ["Healthy habits", "Exercise routines", "Nutrition tips"]
    },
    'hi': {
      responses: [
        "рдЖрдкрдХреА рд╕реЗрд╣рдд рдорд╛рдпрдиреЗ рд░рдЦрддреА рд╣реИ! рдирд┐рдпрдорд┐рдд рдЬрд╛рдВрдЪ, рд╕рдВрддреБрд▓рд┐рдд рдкреЛрд╖рдг, рд╡реНрдпрд╛рдпрд╛рдо, рдФрд░ рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реНрд╡рд╕реНрде рдЬреАрд╡рди рдХреА рдХреБрдВрдЬреА рд╣реИрдВред",
        "рдлреЛрдХрд╕ рдХрд░реЗрдВ: 8 рдШрдВрдЯреЗ рдиреАрдВрдж, 2L рдкрд╛рдиреА рд░реЛрдЬрд╝, 30 рдорд┐рдирдЯ рдПрдХреНрд╕рд░рд╕рд╛рдЗрдЬ, рдкреМрд╖реНрдЯрд┐рдХ рднреЛрдЬрди, рддрдирд╛рд╡ рдкреНрд░рдмрдВрдзрдиред"
      ],
      suggestions: ["рд╕реНрд╡рд╕реНрде рдЖрджрддреЗрдВ", "рдПрдХреНрд╕рд░рд╕рд╛рдЗрдЬ рд░реВрдЯреАрди", "рдкреЛрд╖рдг рдЯрд┐рдкреНрд╕"]
    },
    'te': {
      responses: [
        "р░ор▒А р░Жр░░р▒Лр░Чр▒Нр░пр░В р░ор▒Бр░Цр▒Нр░пр░В! р░Хр▒Нр░░р░о р░др░кр▒Нр░кр░Хр▒Бр░Вр░бр░╛ р░Ър▒Жр░Хр▒Н-р░Ер░кр▒Нр░╕р▒Н, р░╕р░ор░др▒Бр░▓р▒Нр░п р░кр▒Лр░╖р░г, р░╡р▒Нр░пр░╛р░пр░╛р░ор░В, р░ор░░р░┐р░пр▒Б р░ор░╛р░ир░╕р░┐р░Х р░Жр░░р▒Лр░Чр▒Нр░пр░В р░Жр░░р▒Лр░Чр▒Нр░пр░Хр░░р░ор▒Ир░и р░Ьр▒Ар░╡р░┐р░др░╛р░ир░┐р░Хр░┐ р░Хр▒Ар░▓я┐╜я┐╜р░В.",
        "р░жр▒Гр░╖р▒Нр░Яр░┐ р░кр▒Жр░Яр▒Нр░Яр░Вр░бр░┐: 8 р░Чр░Вр░Яр░▓ р░ир░┐р░жр▒Нр░░, р░░р▒Лр░Ьр▒Бр░Хр▒Б 2L р░ир▒Ар░░р▒Б, 30 р░ир░┐р░ор░┐р░╖р░╛р░▓ р░╡р▒Нр░пр░╛р░пр░╛р░ор░В, р░кр▒Лр░╖р░Хр░╛р░╣р░╛р░░р░В, р░Тр░др▒Нр░др░┐р░бр░┐ р░ир░┐р░░р▒Нр░╡р░╣р░г."
      ],
      suggestions: ["р░Жр░░р▒Лр░Чр▒Нр░пр░Хр░░р░ор▒Ир░и р░Ер░▓р░╡р░╛р░Яр▒Нр░▓р▒Б", "р░╡р▒Нр░пр░╛р░пр░╛р░о р░жр░┐р░ир░Ър░░р▒Нр░пр░▓р▒Б", "р░кр▒Лр░╖р░г р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р▒Б"]
    },
    'ta': {
      responses: [
        "роЙроЩрпНроХро│рпН роЖро░рпЛроХрпНроХро┐ропроорпН роорпБроХрпНроХро┐ропроорпН! ро╡ро┤роХрпНроХрооро╛рой рокро░ро┐роЪрпЛродройрпИроХро│рпН, роЪрпАро░ро╛рой роКроЯрпНроЯроЪрпНроЪродрпНродрпБ, роЙроЯро▒рпНрокропро┐ро▒рпНроЪро┐, рооро▒рпНро▒рпБроорпН роорой роиро▓роорпН роЖро░рпЛроХрпНроХро┐ропрооро╛рой ро╡ро╛ро┤я┐╜я┐╜я┐╜роХрпНроХрпИроХрпНроХрпБ роорпБроХрпНроХро┐ропроорпН.",
        "роХро╡ройроорпН роЪрпЖро▓рпБродрпНродрпБроЩрпНроХро│рпН: 8 роорогро┐ роирпЗро░ родрпВроХрпНроХроорпН, родро┐ройроорпБроорпН 2L родрогрпНрогрпАро░рпН, 30 роиро┐рооро┐роЯ роЙроЯро▒рпНрокропро┐ро▒рпНроЪро┐, роЪродрпНродро╛рой роЙрогро╡рпБ, роорой роЕро┤рпБродрпНрод роорпЗро▓ро╛рогрпНроорпИ."
      ],
      suggestions: ["роЖро░рпЛроХрпНроХро┐ропрооро╛рой рокро┤роХрпНроХроЩрпНроХро│рпН", "роЙроЯро▒рпНрокропро┐ро▒рпНроЪро┐ ро╡ро┤роХрпНроХроЩрпНроХро│рпН", "роКроЯрпНроЯроЪрпНроЪродрпНродрпБ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН"]
    },
    'kn': {
      responses: [
        "р▓ир▓┐р▓ор│Нр▓о р▓Жр▓░р│Лр▓Чр│Нр▓п р▓ор│Бр▓Цр│Нр▓п! р▓ир▓┐р▓пр▓ор▓┐р▓д р▓кр▓░р│Ар▓Хр│Нр▓╖р│Жр▓Чр▓│р│Б, р▓╕р▓ор▓др│Лр▓▓р▓┐р▓д р▓кр│Лр▓╖р▓гр│Ж, р▓╡р│Нр▓пр▓╛р▓пр▓╛р▓о, р▓ор▓др│Нр▓др│Б р▓ор▓╛р▓ир▓╕р▓┐р▓Х р▓Хр▓▓р│Нр▓пр▓╛р▓г р▓Жр▓░р│Лр▓Чр│Нр▓пр▓Хр▓░ р▓Ьр│Ар▓╡р▓ир▓Хр│Нр▓Хр│Ж р▓ор│Бр▓Цр│Нр▓п.",
        "р▓Чр▓ор▓и р▓╣р▓░р▓┐р▓╕р▓┐: 8 р▓Чр▓Вр▓Яр│Жр▓Чр▓│ р▓ир▓┐р▓жр│Нр▓░р│Ж, р▓жр▓┐р▓ир▓Хр│Нр▓Хр│Ж 2L р▓ир│Ар▓░р│Б, 30 р▓ир▓┐р▓ор▓┐р▓╖р▓Чр▓│ р▓╡р│Нр▓пр▓╛р▓пр▓╛р▓о, р▓кр│Мр▓╖р│Нр▓Яр▓┐р▓Х р▓Жр▓╣р▓╛р▓░, р▓Тр▓др│Нр▓др▓б р▓ир▓┐р▓░р│Нр▓╡р▓╣р▓гр│Ж."
      ],
      suggestions: ["р▓Жр▓░р│Лр▓Чр│Нр▓пр▓Хр▓░ р▓Ер▓нр│Нр▓пр▓╛р▓╕р▓Чр▓│р│Б", "р▓╡р│Нр▓пр▓╛р▓пр▓╛р▓о р▓жр▓┐р▓ир▓Ър▓░р▓┐р▓Чр▓│р│Б", "р▓кр│Ля┐╜я┐╜р▓гр│Ж р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б"]
    }
  }
};

const quickQuestions = {
  'en': [
    "Why am I bloated during periods?",
    "How to deal with period cramps?",
    "Is my cycle normal?",
    "Period mood swings help",
    "What to eat during periods?",
    "When to see a gynecologist?",
    "Exercise during periods safe?",
    "Period hygiene tips"
  ],
  'hi': [
    "рдкреАрд░рд┐рдпрдбреНрд╕ рдореЗрдВ рдкреЗрдЯ рдлреВрд▓рдирд╛ рдХреНрдпреЛрдВ?",
    "рдкреАрд░рд┐рдпрдбреНрд╕ рдХреЗ рджрд░реНрдж рдХрд╛ рдЗрд▓рд╛рдЬ?",
    "рдХреНрдпрд╛ рдореЗрд░рд╛ рд╕рд╛рдЗрдХрд▓ рд╕рд╛рдорд╛рдиреНрдп рд╣реИ?",
    "рдкреАрд░рд┐рдпрдбреНрд╕ рдореЗрдВ рдореВрдб рд╕реНрд╡рд┐рдВрдЧреНрд╕",
    "рдкреАрд░рд┐рдпрдбреНрд╕ рдореЗрдВ рдХреНрдпрд╛ рдЦрд╛рдПрдВ?",
    "рдЧрд╛рдпрдиреЗрдХреЛрд▓реЙрдЬрд┐рд╕реНрдЯ рд╕реЗ рдХрдм рдорд┐рд▓реЗрдВ?",
    "рдкреАрд░рд┐рдпрдбреНрд╕ рдореЗрдВ рдПрдХреНрд╕рд░рд╕рд╛рдЗрдЬ?",
    "рдкреАрд░рд┐рдпрдбреНрд╕ рд╣рд╛рдЗрдЬреАрди рдЯрд┐рдкреНрд╕"
  ],
  'te': [
    "р░кр▒Ар░░р░┐р░пр░бр▒Нр░╕р▒НтАМр░▓р▒Л р░Хр░бр▒Бр░кр▒Б р░Ор░Вр░жр▒Бр░Хр▒Б р░Йр░мр▒Нр░мр▒Бр░др▒Бр░Вр░жр░┐?",
    "р░кр▒Ар░░р░┐р░пр░бр▒Н р░ир▒Кр░кр▒Нр░кр▒Бр░▓р░др▒Л р░Ор░▓р░╛ р░╡р▒Нр░пр░╡р░╣р░░р░┐р░Вр░Ър░╛р░▓р░┐?",
    "р░ир░╛ р░Ър░Хр▒Нр░░р░В р░╕р░╛р░зя┐╜я┐╜р░░р░гр░ор▒Зр░ир░╛?",
    "р░кр▒Ар░░р░┐р░пр░бр▒Н р░ор▒Вр░бр▒Н р░╕р▒Нр░╡р░┐р░Вр░Чр▒Нр░╕р▒Н р░╕р░╣р░╛р░пр░В",
    "р░кр▒Ар░░р░┐р░пр░бр▒Нр░╕р▒НтАМр░▓р▒Л р░Пр░ор░┐ р░др░┐р░ир░╛р░▓р░┐?",
    "р░Чр▒Ир░ир░Хр░╛р░▓р░Ьр░┐р░╕р▒Нр░Яр▒НтАМр░ир░┐ р░Ор░кр▒Нр░кр▒Бр░бр▒Б р░Хр░▓р░╡р░╛р░▓р░┐?",
    "р░кя┐╜я┐╜р░░р░┐р░пр░бр▒Нр░╕р▒НтАМр░▓р▒Л р░╡р▒Нр░пр░╛р░пр░╛р░ор░В р░╕р▒Бр░░р░Хр▒Нр░╖р░┐р░др░ор░╛?",
    "р░кр▒Ар░░р░┐р░пр░бр▒Н р░кр░░р░┐р░╢р▒Бр░нр▒Нр░░р░д р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р▒Б"
  ],
  'ta': [
    "рооро╛родро╡ро┐роЯро╛ропрпНроХро│ро┐ройрпН рокрпЛродрпБ ро╡ропро┐ро▒рпБ роПройрпН ро╡рпАроЩрпНроХрпБроХро┐ро▒родрпБ?",
    "рооро╛родро╡ро┐роЯро╛ропрпН ро╡ро▓ро┐ропрпИ роОрокрпНрокроЯро┐ роЪрооро╛ро│ро┐рокрпНрокродрпБ?",
    "роОройрпН роЪрпБро┤ро▒рпНроЪро┐ роЪро╛родро╛ро░рогрооро╛?",
    "рооро╛родро╡ро┐роЯро╛ропрпН рооройроиро┐ро▓рпИ рооро╛ро▒рпНро▒роЩрпНроХро│рпН роЙродро╡ро┐",
    "рооро╛родро╡ро┐роЯро╛ропрпНроХро│ро┐ройрпН рокрпЛродрпБ роОройрпНрой роЪро╛рокрпНрокро┐роЯ ро╡рпЗрогрпНроЯрпБроорпН?",
    "роороХро│ро┐ро░рпН рооро░рпБродрпНродрпБро╡ро░рпИ роОрокрпНрокрпЛродрпБ рокро╛ро░рпНроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН?",
    "рооро╛родро╡ро┐роЯро╛ропрпНроХро│ро┐ройрпН рокрпЛродрпБ роЙроЯро▒рпНрокропро┐ро▒рпНроЪро┐ рокроЕрокрпНрокро╛ройродро╛?",
    "рооро╛родро╡ро┐роЯро╛ропрпН роЪрпБроХро╛родро╛ро░ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН"
  ],
  'kn': [
    "р▓кр│Ар▓░р▓┐р▓пр▓бр│НтАМр▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓╣р│Кр▓Яр│Нр▓Яр│Ж р▓Пр▓Хр│Ж р▓Кр▓жр▓┐р▓Хр│Кр▓│р│Нр▓│р│Бр▓др│Нр▓др▓жр│Ж?",
    "р▓кр│Ар▓░р▓┐р▓пр▓бр│Н р▓ир│Лр▓╡р▓┐р▓ир│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓╣р│Зр▓Чр│Ж р▓╡р│Нр▓пр▓╡р▓╣р▓░р▓┐р▓╕р│Бр▓╡р│Бр▓жр│Б?",
    "р▓ир▓ир│Нр▓и р▓Ър▓Хр│Нр▓░ р▓╕р▓╛р▓ор▓╛р▓ир│Нр▓пр▓╡р│З?",
    "р▓кр│Ар▓░р▓┐р▓пр▓бр│Н р▓ор│Вр▓бр│Н р▓╕р│Нр▓╡р▓┐р▓Вр▓Чр│НтАМр▓Чр▓│ р▓╕р▓╣р▓╛р▓п",
    "р▓кр│Ар▓░р▓┐р▓пр▓бр│НтАМр▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓Пр▓ир│Б р▓др▓┐р▓ир│Нр▓ир▓мр│Зр▓Хр│Б?",
    "р▓Чр│Ир▓ир▓Хр▓╛р▓▓р▓Ьр▓┐р▓╕р│Нр▓Яр│Н р▓Ер▓ир│Нр▓ир│Б р▓пр▓╛р▓╡р▓╛р▓Ч р▓нр│Зр▓Яр▓┐ р▓ор▓╛р▓бр▓мр│Зр▓Хр│Б?",
    "р▓кр│Ар▓░р▓┐р▓пр▓бр│НтАМр▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓╡р│Нр▓пр▓╛р▓пр▓╛р▓о р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓┐р▓др▓╡р│З?",
    "р▓кр│Ар▓░р▓┐р▓пр▓бр│Н р▓╕р│Нр▓╡р▓Ър│Нр▓Ыр▓др│Ж р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б"
  ]
};

export default function WellnessChatbot() {
  const { currentLanguage } = useLanguage();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState('');
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const recognitionRef = useRef<any>(null);

  useEffect(() => {
    // Initialize with welcome message
    const welcomeMessage: ChatMessage = {
      id: '1',
      type: 'bot',
      message: getWelcomeMessage(),
      timestamp: new Date(),
      category: 'general',
      suggestions: quickQuestions[currentLanguage as keyof typeof quickQuestions]?.slice(0, 4) || quickQuestions.en.slice(0, 4)
    };
    setMessages([welcomeMessage]);

    // Initialize speech recognition
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = getLanguageCode();

      recognitionRef.current.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript;
        setInput(transcript);
        setIsListening(false);
      };

      recognitionRef.current.onerror = () => {
        setIsListening(false);
      };

      recognitionRef.current.onend = () => {
        setIsListening(false);
      };
    }
  }, [currentLanguage]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const getLanguageCode = () => {
    switch (currentLanguage) {
      case 'hi': return 'hi-IN';
      case 'te': return 'te-IN';
      case 'ta': return 'ta-IN';
      case 'kn': return 'kn-IN';
      default: return 'en-IN';
    }
  };

  const getWelcomeMessage = () => {
    switch (currentLanguage) {
      case 'hi':
        return "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХреА рд╡реЗрд▓рдиреЗрд╕ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реВрдВред ЁЯМ╕ рдкреАрд░рд┐рдпрдбреНрд╕, рд╕реНрд╡рд╛рд╕реНрдереНрдп рдпрд╛ рдореВрдб рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреБрдЫ рднреА рдкреВрдЫреЗрдВ!";
      case 'te':
        return "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░ор▒А р░╡р▒Жр░▓р▒Нр░ир▒Жр░╕р▒Н р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒Н. ЁЯМ╕ р░кр▒Ар░░р░┐р░пр░бр▒Нр░╕р▒Н, р░Жр░░р▒Лр░Чр▒Нр░пр░В р░▓р▒Зр░жр░╛ р░ор▒Вр░бр▒Н р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Пр░жр▒Ир░ир░╛ р░Ер░бр░Чр░Вр░бр░┐!";
      case 'ta':
        return "ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЙроЩрпНроХро│рпН роиро▓ройрпН роЙродро╡ро┐ропро╛ро│ро░рпН. ЁЯМ╕ рооро╛родро╡ро┐роЯро╛ропрпН, роЖро░я┐╜я┐╜я┐╜роХрпНроХро┐ропроорпН роЕро▓рпНро▓родрпБ рооройроиро┐ро▓рпИ рокро▒рпНро▒ро┐ роОродрпИропрпБроорпН роХрпЗро│рпБроЩрпНроХро│рпН!";
      default:
        return "Hello! I'm your wellness assistant! ЁЯМ╕ Ask me anything about periods, health, or mood - I'm here to help!";
    }
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const findBestResponse = (userMessage: string): ChatMessage => {
    const message = userMessage.toLowerCase();
    const lang = currentLanguage as keyof typeof wellnessKnowledge[string];
    
    // Keywords matching
    const keywords = {
      period_pain: ['pain', 'cramp', 'hurt', 'ache', 'рджрд░реНрдж', 'рдХреНрд░реИрдореНрдк', 'р░ир▒Кр░кр▒Нр░кр░┐', 'ро╡ро▓ро┐'],
      irregular_periods: ['irregular', 'late', 'early', 'missed', 'рдЕрдирд┐рдпрдорд┐рдд', 'рджреЗрд░', 'р░Ер░ир░┐р░пр░ор░┐р░д', 'р░Жр░▓р░╕р▒Нр░пр░В', 'роТро┤рпБроЩрпНроХро▒рпНро▒'],
      mood_swings: ['mood', 'angry', 'sad', 'emotional', 'mood swing', 'рдореВрдб', 'рдЧреБрд╕реНрд╕рд╛', 'рдореВрдбреА', 'р░ор▒Вр░бр▒Н', 'р░Хр▒Лр░кр░В', 'рооройроиро┐ро▓рпИ', 'роХрпЛрокроорпН'],
      general_health: ['health', 'healthy', 'exercise', 'nutrition', 'рд╕реНрд╡рд╛рд╕реНрдереНрдп', 'рд╕реНрд╡рд╕реНрде', 'р░Жр░░р▒Лр░Чр▒Нр░пр░В', 'р░Жр░░р▒Лр░Чр▒Нр░пр░Хр░░р░ор▒Ир░и', 'роЖро░рпЛроХрпНроХро┐ропроорпН']
    };

    let bestMatch = 'general_health';
    let maxMatches = 0;

    Object.entries(keywords).forEach(([category, categoryKeywords]) => {
      const matches = categoryKeywords.filter(keyword => message.includes(keyword)).length;
      if (matches > maxMatches) {
        maxMatches = matches;
        bestMatch = category;
      }
    });

    const responses = wellnessKnowledge[bestMatch]?.[lang]?.responses || wellnessKnowledge[bestMatch]?.['en']?.responses || ["I understand your concern. Let me help you with that!"];
    const suggestions = wellnessKnowledge[bestMatch]?.[lang]?.suggestions || wellnessKnowledge[bestMatch]?.['en']?.suggestions;
    
    const randomResponse = responses[Math.floor(Math.random() * responses.length)];

    return {
      id: Date.now().toString(),
      type: 'bot',
      message: randomResponse,
      timestamp: new Date(),
      category: bestMatch as any,
      suggestions: suggestions
    };
  };

  const handleSendMessage = async () => {
    if (!input.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      message: input,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsTyping(true);

    // Simulate typing delay
    setTimeout(() => {
      let botResponse = findBestResponse(input);

      // Add some fun reactions for specific words/phrases
      if (input.toLowerCase().includes('awesome') || input.toLowerCase().includes('great') || input.toLowerCase().includes('amazing')) {
        const celebrations = {
          'en': ["Yasss queen! ЁЯОЙ You're absolutely amazing!", "That's the spirit! тЬи Keep shining!", "You're unstoppable! ЁЯТк What else can I help with?"],
          'hi': ["рд╡рд╛рд╣ рдХреНрд╡реАрди! ЁЯОЙ рдЖрдк рдмрд┐рд▓реНрдХреБрд▓ рдЕрджреНрднреБрдд рд╣реИрдВ!", "рдпрд╣я┐╜я┐╜я┐╜ рддреЛ рднрд╛рд╡рдирд╛ рд╣реИ! тЬи рдЪрдордХрддреЗ рд░рд╣рд┐рдП!", "рдЖрдк рдЕрдЬреЗрдп рд╣реИрдВ! ЁЯТк рдФрд░ рдХреНрдпрд╛ рдорджрдж рдЪрд╛рд╣рд┐рдП?"],
          'te': ["р░╡р░╛р░╣р▒Н р░Хр▒Нр░╡р▒Ар░ир▒Н! ЁЯОЙ р░ор▒Ар░░р▒Б р░Ър░╛р░▓р░╛ р░Ер░жр▒Нр░нр▒Бр░др░В!", "р░Ер░жр▒З р░╕р▒Нр░кр░┐р░░р░┐р░Яр▒Н! тЬи р░ор▒Жр░░р▒Бр░╕р▒Нр░др▒В р░Йр░Вр░бр░Вр░бр░┐!", "р░ор▒Ар░░р▒Б р░Ер░Ьр▒Зр░пр▒Бр░▓р▒Б! ЁЯТк р░Зр░Вр░Хр░╛ р░Пр░В р░╕р░╣р░╛р░пр░В?"],
          'ta': ["ро╡ро╛ро╡рпН роХрпБропрпАройрпН! ЁЯОЙ роирпАроЩрпНроХро│рпН роорпБро▒рпНро▒ро┐ро▓рпБроорпН роЕро▒рпНрокрпБродроорпН!", "роЕродрпБродро╛ройрпН роЙрогро░рпНро╡рпБ! тЬи родрпКроЯро░рпНроирпНродрпБ рокро┐ро░роХро╛роЪро┐ропрпБроЩрпНроХро│рпН!", "роирпАроЩрпНроХро│рпН родроЯрпБроХрпНроХ роорпБроЯро┐ропро╛родро╡ро░рпН! ЁЯТк ро╡рпЗро▒рпБ роОройрпНрой роЙродро╡ро┐?"],
          'kn': ["р▓╡р▓╛р▓╡р│Н р▓Хр│Нр▓╡р│Ар▓ир│Н! ЁЯОЙ р▓ир│Ар▓╡р│Б р▓╕р▓Вр▓кр│Вр▓░р│Нр▓гр▓╡р▓╛р▓Чр▓┐ р▓Ер▓жр│Нр▓нр│Бр▓д!", "р▓Ер▓жр│З р▓╕р│Нр▓кр▓┐р▓░р▓┐р▓Яр│Н! тЬи р▓ор│Жр▓░р│Жр▓пр│Бр▓др│Нр▓др▓┐р▓░р▓┐!", "р▓ир│Ар▓╡р│Б р▓др▓бр│Жр▓пр▓▓р▓╛р▓Чр▓жр▓╡р▓░р│Б! ЁЯТк р▓Зр▓ир│Нр▓ир│Зр▓ир│Б р▓╕р▓╣р▓╛р▓п?"]
        };
        const langCelebrations = celebrations[currentLanguage as keyof typeof celebrations] || celebrations.en;
        botResponse.message = langCelebrations[Math.floor(Math.random() * langCelebrations.length)];
      }

      if (input.toLowerCase().includes('tired') || input.toLowerCase().includes('stressed') || input.toLowerCase().includes('sad')) {
        const supportive = {
          'en': ["Hey beautiful, it's okay to feel tired sometimes! ЁЯдЧ You're doing your best and that's enough.", "Sending you virtual hugs! ЁЯТХ Remember, even queens need rest days.", "You're so brave for sharing this! ЁЯМЯ Let's find ways to make you feel better."],
          'hi': ["рдЕрд░реЗ рд╕реБрдВрджрд░, рдХрднреА-рдХрднреА рдердХрд╛рди рдорд╣рд╕реВрд╕ рдХрд░рдирд╛ рдареАрдХ рд╣реИ! ЁЯдЧ рдЖрдк рдЕрдкрдирд╛ рд╕рд░реНрд╡реЛрддреНрддрдо рдХрд░ рд░рд╣реА рд╣реИрдВ рдФрд░ рдпрд╣ рдХрд╛рдлреА рд╣реИред", "рдЖрдкрдХреЛ рд╡рд░реНрдЪреБрдЕрд▓ рд╣рдЧ рднреЗрдЬ рд░рд╣реА рд╣реВрдБ! ЁЯТХ рдпрд╛рдж рд░рдЦреЗрдВ, рд░рд╛рдирд┐рдпреЛрдВ рдХреЛ рднреА рдЖрд░рд╛рдо рдХреЗ рджрд┐рди рдЪрд╛рд╣рд┐рдПред"],
          'te': ["р░╣р▒З р░мр▒Нр░пр▒Вр░Яр░┐р░лр▒Бр░▓р▒Н, р░Хр▒Кр░ир▒Нр░ир░┐р░╕р░╛р░░р▒Нр░▓р▒Б р░Ер░▓р░╕р░┐р░кр▒Лр░╡р░бр░В р░╕р░╛р░зр░╛р░░р░гр░В! ЁЯдЧ р░ор▒Ар░░р▒Б р░ор▒А р░Ер░др▒Нр░пр▒Бр░др▒Нр░др░ор░В р░Ър▒Зр░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░░р▒Б р░ор░░р░┐р░пр▒Б р░Ер░жр░┐ р░Ър░╛р░▓р▒Б.", "р░ор▒Ар░Хр▒Б р░╡р░░р▒Нр░Ър▒Бр░╡р░▓р▒Н р░╣р░Чр▒Нр░╕р▒Н р░кр░Вр░кр▒Бр░др▒Бр░ир▒Нр░ир░╛р░ир▒Б! ЁЯТХ р░Чр▒Бр░░р▒Нр░др▒Бр░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐, р░░р░╛я┐╜я┐╜я┐╜р▒Бр░▓р░Хр▒Б р░Хр▒Вр░бр░╛ р░╡р░┐р░╢р▒Нр░░р░╛р░Вр░др░┐ р░░р▒Лр░Ьр▒Бр░▓р▒Б р░Ер░╡р░╕р░░р░В."],
          'ta': ["ро╣рпЗ рокро┐ропрпВроЯрпНроЯро┐роГрокрпБро▓рпН, роЪро┐ро▓ роирпЗро░роЩрпНроХро│ро┐ро▓рпН роЪрпЛро░рпНро╡ро╛роХ роЙрогро░рпНро╡родрпБ роЪро░ро┐родро╛ройрпН! ЁЯдЧ роирпАроЩрпНроХро│рпН роЙроЩрпНроХро│рпН роЪро┐ро▒роирпНродродрпИ роЪрпЖропрпНроХро┐ро▒рпАро░рпНроХро│рпН, роЕродрпБро╡рпЗ рокрпЛродрпБроорпН.", "роЙроЩрпНроХро│рпБроХрпНроХрпБ ро╡ро░рпНроЪрпНроЪрпБро╡ро▓рпН ро╣роХрпНро╕рпН роЕройрпБрокрпНрокрпБроХро┐ро▒рпЗройрпН! ЁЯТХ роиро┐ройрпИро╡ро┐ро▓рпН роХрпКро│рпНро│рпБроЩрпНроХро│рпН, ро░ро╛рогро┐роХро│рпБроХрпНроХрпБроорпН роУропрпНро╡рпБ роиро╛роЯрпНроХро│рпН родрпЗро╡рпИ."],
          'kn': ["р▓╣р│З р▓мр│Нр▓пр│Вр▓Яр▓┐р▓лр│Бр▓▓р│Н, р▓Хр│Жр▓▓р▓╡р│Кр▓ор│Нр▓ор│Ж р▓жр▓гр▓┐р▓╡р│Б р▓Ер▓ир│Бр▓нр▓╡р▓┐р▓╕р│Бр▓╡р│Бр▓жр│Б р▓╕р▓░р▓┐! ЁЯдЧ р▓ир│Ар▓╡р│Б р▓ир▓┐р▓ор│Нр▓о р▓Ер▓др│Нр▓пр│Бр▓др│Нр▓др▓ор▓╡р▓ир│Нр▓ир│Б р▓ор▓╛р▓бр│Бр▓др│Нр▓др▓┐р▓жр│Нр▓жр│Ар▓░р▓┐ р▓ор▓др│Нр▓др│Б р▓Ер▓жр▓┐ р▓╕р▓╛р▓Хр│Б.", "р▓ир▓┐р▓ор▓Чр│Ж р▓╡р▓░р│Нр▓Ър│Бр▓╡р▓▓р│Н р▓╣р▓Чр│Нр▓╕р│Н р▓Хр▓│р│Бр▓╣р▓┐р▓╕р│Бр▓др│Нр▓др▓┐р▓жр│Нр▓жр│Зр▓ир│Ж! ЁЯТХ р▓Чр│Бр▓░р│Бр▓др▓┐р▓бр▓┐, р▓░р▓╛р▓гр▓┐р▓пр▓░р▓┐р▓Чр│В р▓╡р▓┐р▓╢р│Нр▓░р▓╛р▓Вр▓др▓┐ р▓жр▓┐р▓ир▓Чр▓│р│Б р▓мр│Зр▓Хр▓╛р▓Чр│Бр▓др│Нр▓др▓╡р│Ж."]
        };
        const langSupport = supportive[currentLanguage as keyof typeof supportive] || supportive.en;
        botResponse.message = langSupport[Math.floor(Math.random() * langSupport.length)];
      }

      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);

      // Speak the response if speech is enabled
      if (isSpeaking) {
        speakMessage(botResponse.message);
      }
    }, 1000 + Math.random() * 1500);
  };

  const handleSuggestionClick = (suggestion: string) => {
    setInput(suggestion);
    handleSendMessage();
  };

  const toggleListening = () => {
    if (recognitionRef.current) {
      if (isListening) {
        recognitionRef.current.stop();
      } else {
        recognitionRef.current.start();
        setIsListening(true);
      }
    }
  };

  const speakMessage = (message: string) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(message);
      utterance.lang = getLanguageCode();
      utterance.rate = 0.9;
      utterance.pitch = 1.1;
      speechSynthesis.speak(utterance);
    }
  };

  const toggleSpeaking = () => {
    setIsSpeaking(!isSpeaking);
    if (isSpeaking) {
      speechSynthesis.cancel();
    }
  };

  const clearChat = () => {
    setMessages([{
      id: '1',
      type: 'bot',
      message: getWelcomeMessage(),
      timestamp: new Date(),
      category: 'general',
      suggestions: quickQuestions[currentLanguage as keyof typeof quickQuestions]?.slice(0, 4) || quickQuestions.en.slice(0, 4)
    }]);
  };

  return (
    <div className="flex flex-col h-96 bg-gradient-to-b from-pink-50 to-purple-50 dark:from-pink-900/20 dark:to-purple-900/20 rounded-2xl border border-primary/20">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-primary/20">
        <div className="flex items-center gap-3">
          <div className="relative">
            <Bot className="w-8 h-8 text-purple-500" />
            <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white animate-pulse"></div>
          </div>
          <div>
            <h3 className="font-semibold text-foreground">Sakhi Assistant</h3>
            <p className="text-xs text-muted-foreground">Wellness & Period Support</p>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={toggleSpeaking}
            className={`rounded-xl ${isSpeaking ? 'text-purple-500' : 'text-muted-foreground'}`}
          >
            {isSpeaking ? <Volume2 className="w-4 h-4" /> : <VolumeX className="w-4 h-4" />}
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={clearChat}
            className="rounded-xl text-muted-foreground"
          >
            <RefreshCw className="w-4 h-4" />
          </Button>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        <AnimatePresence>
          {messages.map((message) => (
            <motion.div
              key={message.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div className={`max-w-[80%] ${
                message.type === 'user'
                  ? 'bg-primary text-white rounded-2xl rounded-tr-sm'
                  : 'bg-white dark:bg-gray-800 text-foreground rounded-2xl rounded-tl-sm border border-primary/20'
              } p-3 shadow-sm`}>
                <p className="text-sm">{message.message}</p>
                
                {message.suggestions && message.suggestions.length > 0 && (
                  <div className="mt-3 space-y-2">
                    <p className="text-xs opacity-75">Quick questions:</p>
                    <div className="flex flex-wrap gap-1">
                      {message.suggestions.slice(0, 3).map((suggestion, index) => (
                        <button
                          key={index}
                          onClick={() => handleSuggestionClick(suggestion)}
                          className="text-xs bg-primary/10 hover:bg-primary/20 text-primary px-2 py-1 rounded-lg transition-colors"
                        >
                          {suggestion}
                        </button>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </motion.div>
          ))}
        </AnimatePresence>

        {isTyping && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="flex justify-start"
          >
            <div className="bg-white dark:bg-gray-800 rounded-2xl rounded-tl-sm border border-primary/20 p-3 shadow-sm">
              <div className="flex items-center gap-1">
                <div className="w-2 h-2 bg-purple-500 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-purple-500 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                <div className="w-2 h-2 bg-purple-500 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
              </div>
            </div>
          </motion.div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Quick Suggestions */}
      <div className="p-2 border-t border-primary/20">
        <div className="flex gap-2 overflow-x-auto pb-2">
          {quickQuestions[currentLanguage as keyof typeof quickQuestions]?.slice(0, 4).map((question, index) => (
            <button
              key={index}
              onClick={() => handleSuggestionClick(question)}
              className="flex-shrink-0 text-xs bg-gradient-to-r from-pink-100 to-purple-100 dark:from-pink-900/30 dark:to-purple-900/30 text-purple-700 dark:text-purple-300 px-3 py-2 rounded-full border border-purple-200 dark:border-purple-700 hover:shadow-md transition-all"
            >
              {question}
            </button>
          ))}
        </div>
      </div>

      {/* Input Area */}
      <div className="p-4 border-t border-primary/20">
        <div className="flex items-center gap-2">
          <div className="flex-1 relative">
            <Input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              placeholder="Ask about periods, health, mood..."
              className="rounded-2xl pr-12 bg-white dark:bg-gray-800"
            />
            {recognitionRef.current && (
              <Button
                variant="ghost"
                size="sm"
                onClick={toggleListening}
                className={`absolute right-2 top-1/2 transform -translate-y-1/2 rounded-xl ${
                  isListening ? 'text-red-500 animate-pulse' : 'text-muted-foreground'
                }`}
              >
                {isListening ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
              </Button>
            )}
          </div>
          
          <Button
            onClick={handleSendMessage}
            disabled={!input.trim()}
            className="rounded-2xl bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-600 hover:to-purple-600"
          >
            <Send className="w-4 h-4" />
          </Button>
        </div>
      </div>
    </div>
  );
}
