import { Language } from '@shared/types';

interface EmergencyContact {
  id: string;
  name: string;
  phone: string;
  relation: string;
  isPrimary: boolean;
}

interface LocationData {
  latitude: number;
  longitude: number;
  accuracy?: number;
  address?: string;
  timestamp: Date;
}

interface EmergencyAlert {
  id: string;
  userId: string;
  location: LocationData;
  message: string;
  timestamp: Date;
  contacts: EmergencyContact[];
  language: Language;
  severity: 'low' | 'medium' | 'high' | 'emergency';
}

class SMSService {
  private emergencyContacts: EmergencyContact[] = [];
  private currentLocation: LocationData | null = null;

  // Emergency message templates in different languages
  private emergencyTemplates: Record<Language, Record<string, string>> = {
    en: {
      sos: 'ЁЯЪи EMERGENCY ALERT from Sakhi App ЁЯЪи\n\n{userName} needs immediate help!\n\nLocation: {location}\nTime: {time}\n\nPlease contact them immediately or call emergency services.\n\nSent via Sakhi - Women Safety App',
      safetyAlert: 'тЪая╕П Safety Alert from Sakhi App\n\n{userName} is in an unsafe area.\n\nLocation: {location}\nTime: {time}\n\nPlease check on them.\n\nSent via Sakhi - Women Safety App',
      checkIn: 'тД╣я╕П Check-in from Sakhi App\n\n{userName} has reached their destination safely.\n\nLocation: {location}\nTime: {time}\n\nSent via Sakhi - Women Safety App',
      lowBattery: 'ЁЯФЛ Low Battery Alert from Sakhi App\n\n{userName}\'s phone battery is low (below 15%).\n\nLast known location: {location}\nTime: {time}\n\nSent via Sakhi - Women Safety App'
    },
    hi: {
      sos: 'ЁЯЪи рд╕рдЦреА рдРрдк рд╕реЗ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдЕрд▓рд░реНрдЯ ЁЯЪи\n\n{userName} рдХреЛ рддрддреНрдХрд╛рд▓ рд╕рд╣рд╛рдпрддрд╛ рдЪрд╛рд╣рд┐рдП!\n\nрд╕реНрдерд╛рди: {location}\nрд╕рдордп: {time}\n\nрдХреГрдкрдпрд╛ рддреБрд░рдВрдд рдЙрдирд╕реЗ я┐╜я┐╜я┐╜рдВрдкрд░реНрдХ рдХрд░реЗрдВ рдпрд╛ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдУрдВ рдХреЛ рдХреЙрд▓ рдХрд░реЗрдВред\n\nрд╕рдЦреА - рдорд╣рд┐рд▓рд╛ рд╕реБрд░рдХреНрд╖рд╛ рдРрдк рджреНрд╡рд╛рд░рд╛ рднреЗрдЬрд╛ рдЧрдпрд╛',
      safetyAlert: 'тЪая╕П рд╕рдЦреА рдРрдк рд╕реЗ рд╕реБрд░рдХреНрд╖рд╛ рдЕрд▓рд░реНрдЯ\n\n{userName} рдЕрд╕реБрд░рдХреНрд╖рд┐рдд рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рд╣реИред\n\nрд╕реНрдерд╛рди: {location}\nрд╕рдордп: {time}\n\nрдХреГрдкрдпрд╛ рдЙрдирдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВред\n\nрд╕рдЦреА - рдорд╣рд┐рд▓рд╛ рд╕реБрд░рдХреНрд╖рд╛ рдРрдк рджреНрд╡рд╛рд░рд╛ рднреЗрдЬрд╛ рдЧрдпрд╛',
      checkIn: 'тД╣я╕П рд╕рдЦреА рдРрдк рд╕реЗ рдЪреЗрдХ-рдЗрди\n\n{userName} рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдк рд╕реЗ рдЕрдкрдиреЗ рдЧрдВрддрд╡реНрдп рдкрд░ рдкрд╣реБрдВрдЪ рдЧрдП рд╣реИрдВред\n\nрд╕реНрдерд╛рди: {location}\nрд╕рдордп: {time}\n\nрд╕рдЦреА - рдорд╣рд┐рд▓рд╛ рд╕реБрд░рдХреНрд╖рд╛ рдРрдк рджреНрд╡рд╛рд░рд╛ рднреЗрдЬрд╛ рдЧрдпрд╛',
      lowBattery: 'ЁЯФЛ рд╕рдЦреА рдРрдк рд╕реЗ рдХрдо рдмреИрдЯрд░реА рдЕрд▓рд░реНрдЯ\n\n{userName} рдХреЗ рдлреЛрди рдХреА рдмреИрдЯрд░реА рдХрдо рд╣реИ (15% рд╕реЗ рдХрдо)ред\n\nрдЕрдВрддрд┐рдо рдЬреНрдЮрд╛рдд рд╕реНрдерд╛рди: {location}\nрд╕рдордп: {time}\n\nрд╕рдЦреА - рдорд╣рд┐рд▓рд╛ рд╕реБрд░рдХреНрд╖рд╛ рдРрдк рджреНрд╡рд╛рд░рд╛ рднреЗрдЬрд╛ рдЧрдпя┐╜я┐╜я┐╜'
    },
    kn: {
      sos: 'ЁЯЪи р▓╕р▓Цр▓┐ р▓Жр│Нр▓пр▓кр│НтАМр▓ир▓┐р▓Вр▓ж р▓др│Бр▓░р│Нр▓др│Б р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Ж ЁЯЪи\n\n{userName} р▓Чр│Ж р▓др▓Хр│Нр▓╖р▓гр▓ж р▓╕р▓╣р▓╛р▓п р▓мр│Зр▓Хр│Б!\n\nр▓╕р│Нр▓ер▓│: {location}\nр▓╕р▓ор▓п: {time}\n\nр▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓др▓Хр│Нр▓╖р▓г я┐╜я┐╜я┐╜р▓╡р▓░р▓ир│Нр▓ир│Б р▓╕р▓Вр▓кр▓░р│Нр▓Хр▓┐р▓╕р▓┐ р▓Ер▓ер▓╡р▓╛ р▓др│Бр▓░р│Нр▓др│Б р▓╕р│Зр▓╡р│Жр▓Чр▓│р▓┐р▓Чр│Ж р▓Хр▓░р│Ж р▓ор▓╛р▓бр▓┐ред\n\nр▓╕р▓Цр▓┐ - р▓ор▓╣р▓┐р▓│р▓╛ р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓др▓╛ р▓Жр│Нр▓пр▓кр│Н р▓ор│Вр▓▓р▓Х р▓Хр▓│р│Бр▓╣р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж',
      safetyAlert: 'тЪая╕П р▓╕р▓Цр▓┐ р▓Жр│Нр▓пр▓кр│НтАМр▓ир▓┐р▓Вр▓ж р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓др▓╛ р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Ж\n\n{userName} р▓Ер▓╕р│Бр▓░р▓Хр│Нр▓╖р▓┐р▓д р▓кр│Нр▓░р▓жр│Зр▓╢р▓жр▓▓р│Нр▓▓р▓┐р▓жр│Нр▓жр▓╛р▓░р│Жред\n\nр▓╕р│Нр▓ер▓│: {location}\nр▓╕р▓ор▓п: {time}\n\nр▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓Ер▓╡р▓░р▓ир│Нр▓ир│Б р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓┐ред\n\nр▓╕р▓Цр▓┐ - р▓ор▓╣р▓┐р▓│р▓╛ р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓др▓╛ р▓Жр│Нр▓пр▓кр│Н р▓ор│Вр▓▓р▓Х р▓Хр▓│р│Бр▓╣р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж',
      checkIn: 'тД╣я╕П р▓╕р▓Цр▓┐ р▓Жр│Нр▓пр▓кр│НтАМр▓ир▓┐р▓Вр▓ж р▓Ър│Жр▓Хр│Н-р▓Зр▓ир│Н\n\n{userName} р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓┐р▓др▓╡р▓╛р▓Чр▓┐ р▓др▓ор│Нр▓о р▓Чр▓ор│Нр▓пр▓╕р│Нр▓ер▓╛р▓ир▓╡р▓ир│Нр▓ир│Б р▓др▓▓р│Бр▓кр▓┐р▓жр│Нр▓жр▓╛р▓░р│Жред\n\nр▓╕р│Нр▓ер▓│: {location}\nр▓╕р▓ор▓п: {time}\n\nр▓╕р▓Цр▓┐ - р▓оя┐╜я┐╜я┐╜р▓┐р▓│р▓╛ р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓др▓╛ р▓Жр│Нр▓пр▓кр│Н р▓ор│Вр▓▓р▓Х р▓Хр▓│р│Бр▓╣р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж',
      lowBattery: 'ЁЯФЛ р▓╕р▓Цр▓┐ р▓Жр│Нр▓пр▓кр│НтАМр▓ир▓┐р▓Вр▓ж р▓Хр▓бр▓┐р▓ор│Ж р▓мр│Нр▓пр▓╛р▓Яр▓░р▓┐ р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Ж\n\n{userName} р▓Ер▓╡р▓░ р▓лр│Лр▓ир│Н р▓мр│Нр▓пр▓╛р▓Яр▓░р▓┐ р▓Хр▓бя┐╜я┐╜р▓ор│Жр▓пр▓╛р▓Чр▓┐р▓жр│Ж (15% р▓Хр▓┐р▓Вр▓д р▓Хр▓бр▓┐р▓ор│Ж)ред\n\nр▓Хр│Кр▓ир│Жр▓п р▓др▓┐р▓│р▓┐р▓жр▓┐р▓░р│Бр▓╡ р▓╕р│Нр▓ер▓│: {location}\nр▓╕р▓ор▓п: {time}\n\nр▓╕р▓Цр▓┐ - р▓ор▓╣р▓┐р▓│р▓╛ р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓др▓╛ р▓Жр│Нр▓пр▓кр│Н р▓ор│Вр▓▓р▓Х р▓Хр▓│р│Бр▓╣р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж'
    },
    ta: {
      sos: 'ЁЯЪи роЪроХро┐ роЖрокрпНрокро┐ро▓ро┐ро░рпБроирпНродрпБ роЕро╡роЪро░ роОроЪрпНроЪро░ро┐роХрпНроХрпИ ЁЯЪи\n\n{userName} роЙроЯройроЯро┐ роЙродро╡ро┐ родрпЗро╡рпИ!\n\nроЗроЯроорпН: {location}\nроирпЗро░роорпН: {time}\n\nродропро╡рпБ роЪрпЖропрпНродрпБ роЙроЯройроЯро┐ропро╛роХ роЕро╡ро░рпНроХро│рпИродрпН родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│ро╡рпБроорпН роЕро▓рпНро▓родрпБ роЕро╡роЪро░ роЪрпЗро╡рпИроХро│рпИ роЕро┤рпИроХрпНроХро╡рпБроорпНред\n\nроЪроХро┐ - рокрпЖрогрпНроХро│рпН рокро╛родрпБроХро╛рокрпНрокрпБ роЖрокрпН роорпВро▓роорпН роЕройрпБрокрпНрокрокрпНрокроЯрпНроЯродрпБ',
      safetyAlert: 'тЪая╕П роЪроХро┐ роЖрокрпНрокро┐ро▓ро┐ро░рпБроирпНродрпБ рокро╛родрпБроХро╛рокрпНрокрпБ роОроЪрпНроЪро░ро┐роХрпНроХя┐╜я┐╜я┐╜\n\n{userName} рокро╛родрпБроХро╛рокрпНрокро▒рпНро▒ рокроХрпБродро┐ропро┐ро▓рпН роЙро│рпНро│ро╛ро░рпН.\n\nроЗроЯроорпН: {location}\nроирпЗро░роорпН: {time}\n\nродропро╡рпБ роЪрпЖропрпНродрпБ роЕро╡ро░рпНроХро│рпИроЪрпН роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпНред\n\nроЪроХро┐ - рокрпЖрогрпНроХро│рпН рокро╛родрпБроХро╛рокрпНрокрпБ роЖрокрпН роорпВро▓роорпН роЕройрпБрокрпНрокрокрпНрокроЯрпНроЯродрпБ',
      checkIn: 'тД╣я╕П роЪроХро┐ роЖрокрпНрокро┐ро▓ро┐ро░рпБроирпНродрпБ роЪрпЖроХрпН-роЗройрпН\n\n{userName} рокро╛родрпБроХро╛рокрпНрокро╛роХ родроЩрпНроХро│рпН роЗро▓роХрпНроХрпИ роЕроЯрпИроирпНродрпБро│рпНро│ро╛ро░рпН.\n\nроЗроЯроорпН: {location}\nроирпЗро░роорпН: {time}\n\nроЪроХро┐ - рокрпЖрогрпНроХро│рпН рокро╛родрпБроХро╛рокрпНрокрпБ роЖрокрпН роорпВро▓роорпН роЕройрпБрокрпНрокрокрпНрокроЯрпНроЯродрпБ',
      lowBattery: 'ЁЯФЛ роЪроХро┐ роЖрокрпНрокро┐ро▓ро┐ро░рпБроирпНродрпБ роХрпБро▒рпИроирпНрод рокрпЗроЯрпНроЯро░ро┐ роОроЪрпНроЪро░ро┐роХрпНроХрпИ\n\n{userName} роЗройрпН родрпКро▓рпИрокрпЗроЪро┐ рокрпЗроЯрпНроЯро░ро┐ роХрпБро▒рпИро╡ро╛роХ роЙро│рпНро│родрпБ (15% роХрпНроХрпБроорпН роХрпБро▒рпИро╡ро╛роХ).\n\nроХроЯрпИроЪро┐ропро╛роХ родрпЖро░ро┐роирпНрод роЗроЯроорпН: {location}\nроирпЗро░роорпН: {time}\n\nроЪроХро┐ - рокрпЖрогрпНроХро│рпН рокро╛родрпБроХро╛рокрпНрокрпБ роЖрокрпН роорпВро▓рооя┐╜я┐╜я┐╜ роЕройрпБрокрпНрокрокрпНрокроЯрпНроЯродрпБ'
    },
    te: {
      sos: 'ЁЯЪи р░╕р░Цр░┐ р░пр░╛р░кр▒Н р░ир▒Бр░Вр░бр░┐ р░Ер░др▒Нр░пр░╡р░╕р░░ р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Х ЁЯЪи\n\n{userName} р░Хр▒Б р░др░Хр▒Нр░╖р░г р░╕р░╣р░╛р░пр░В р░Ер░╡р░╕р░░р░В!\n\nр░╕р▒Нр░ер░╛р░ир░В: {location}\nр░╕р░ор░пр░В: {time}\n\nр░жр░пр░Ър▒Зр░╕р░┐ р░╡р▒Жр░Вр░Яр░ир▒З р░╡р░╛р░░р░┐р░ир░┐ р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐ р░▓р▒Зр░жр░╛ р░Ер░др▒Нр░пр░╡р░╕р░░ р░╕р▒Зр░╡р░▓р░Хр▒Б р░Хр░╛р░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐ред\n\nр░╕р░Цр░┐ - р░ор░╣р░┐р░│р░╛ р░нр░жр▒Нр░░р░др░╛ р░пр░╛р░кр▒Н р░жр▒Нр░╡р░╛р░░р░╛ р░кр░Вр░кр░мр░бр░┐р░Вр░жр░┐',
      safetyAlert: 'тЪая╕П р░╕р░Цр░┐ р░пр░╛р░кр▒Н р░ир▒Бр░Вр░бр░┐ р░нр░жр▒Нр░░р░др░╛ р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Х\n\n{userName} р░Ер░╕р▒Бр░░р░Хр▒Нр░╖р░┐р░д р░кр▒Нр░░р░╛р░Вр░др░Вр░▓р▒Л р░Йр░ир▒Нр░ир░╛р░░р▒Б.\n\nр░╕р▒Нр░ер░╛р░ир░В: {location}\nр░╕р░ор░пр░В: {time}\n\nр░жр░пр░Ър▒Зр░╕р░┐ р░╡р░╛р░░р░┐р░ир░┐ р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐.\n\nр░╕р░Цр░┐ - р░ор░╣р░┐р░│р░╛ р░нр░жр▒Нр░░р░др░╛ р░пр░╛р░кр▒Н р░жр▒Нр░╡р░╛р░░р░╛ р░кр░Вр░кр░мр░бр░┐р░Вр░жр░┐',
      checkIn: 'тД╣я╕П р░╕р░Цр░┐ р░пр░╛р░кр▒Н р░ир▒Бр░Вр░бр░┐ р░Ър▒Жр░Хр▒Н-р░Зр░ир▒Н\n\n{userName} р░╕р▒Бр░░р░Хр▒Нр░╖р░┐р░др░Вр░Чр░╛ р░╡р░╛р░░р░┐ р░Чр░ор▒Нр░пр░╕р▒Нр░ер░╛р░ир░╛р░ир░┐р░Хр░┐ р░Ър▒Зр░░р▒Бр░Хр▒Бр░ир▒Нр░ир░╛р░░р▒Б.\n\nр░╕р▒Нр░ер░╛р░ир░В: {location}\nр░╕р░ор░пр░В: {time}\n\nр░╕р░Цр░┐ - р░ор░╣р░┐р░│р░╛ р░нр░жр▒Нр░░р░др░╛ р░пр░╛р░кр▒Н р░жр▒Нр░╡р░╛р░░р░╛ р░кр░Вр░кр░мр░бр░┐р░Вр░жр░┐',
      lowBattery: 'ЁЯФЛ р░╕р░Цр░┐ р░пр░╛р░кр▒Н р░ир▒Бр░Вр░бр░┐ р░др░Хр▒Нр░Хр▒Бр░╡ р░мр▒Нр░пр░╛р░Яр░░р▒А р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Х\n\n{userName} р░пр▒Кр░Хр▒Нр░Х р░лр▒Лр░ир▒Н р░мр▒Ня┐╜я┐╜р░╛р░Яр░░р▒А р░др░Хр▒Нр░Хр▒Бр░╡р░Чр░╛ р░Йр░Вр░жр░┐ (15% р░Хр░Вр░Яр▒З р░др░Хр▒Нр░Хр▒Бр░╡).\n\nр░Ър░┐р░╡р░░р░┐р░Чр░╛ р░др▒Жр░▓р░┐р░╕р░┐р░и р░╕р▒Нр░ер░╛р░ир░В: {location}\nр░╕р░ор░пр░В: {time}\n\nр░╕р░Цр░┐ - р░ор░╣р░┐р░│р░╛ р░нр░жр▒Нр░░р░др░╛ р░пр░╛р░кр▒Н р░жр▒Нр░╡р░╛р░░р░╛ р░кр░Вр░кр░мр░бр░┐р░Вр░жр░┐'
    }
  };

  constructor() {
    this.loadEmergencyContacts();
    this.initializeLocationTracking();
  }

  private loadEmergencyContacts(): void {
    const saved = localStorage.getItem('emergency-contacts');
    if (saved) {
      try {
        this.emergencyContacts = JSON.parse(saved);
      } catch (error) {
        console.error('Error loading emergency contacts:', error);
        this.emergencyContacts = [];
      }
    }
  }

  private saveEmergencyContacts(): void {
    localStorage.setItem('emergency-contacts', JSON.stringify(this.emergencyContacts));
  }

  private async initializeLocationTracking(): Promise<void> {
    try {
      const { locationService } = await import('./locationService');
      const location = await locationService.getCurrentLocation(false);
      this.currentLocation = {
        latitude: location.latitude,
        longitude: location.longitude,
        accuracy: location.accuracy,
        timestamp: location.timestamp,
        address: location.address
      };
      console.log('тЬЕ SMS Service location initialized');
    } catch (error) {
      console.error('Error getting location:', error);
      // Don't throw - allow service to continue without location
    }
  }

  private async getCurrentPosition(): Promise<GeolocationPosition> {
    try {
      const { locationService } = await import('./locationService');
      const location = await locationService.getCurrentLocation(false);

      // Convert to GeolocationPosition format for backward compatibility
      return {
        coords: {
          latitude: location.latitude,
          longitude: location.longitude,
          accuracy: location.accuracy,
          altitude: null,
          altitudeAccuracy: null,
          heading: location.heading || null,
          speed: location.speed || null
        },
        timestamp: location.timestamp.getTime()
      } as GeolocationPosition;
    } catch (error) {
      throw new Error(`Location error: ${error.message || 'Unknown error'}`);
    }
  }

  private async reverseGeocode(location: LocationData): Promise<void> {
    // In a real app, you would use a geocoding service like Google Maps API
    // For demo purposes, we'll create a mock address based on Indian cities
    const mockAddresses = [
      'Koramangala, Bangalore, Karnataka, India',
      'Bandra West, Mumbai, Maharashtra, India', 
      'Connaught Place, New Delhi, India',
      'Anna Nagar, Chennai, Tamil Nadu, India',
      'Hitech City, Hyderabad, Telangana, India'
    ];
    
    location.address = mockAddresses[Math.floor(Math.random() * mockAddresses.length)];
  }

  public addEmergencyContact(contact: Omit<EmergencyContact, 'id'>): EmergencyContact {
    const newContact: EmergencyContact = {
      ...contact,
      id: Date.now().toString()
    };
    
    this.emergencyContacts.push(newContact);
    this.saveEmergencyContacts();
    
    return newContact;
  }

  public removeEmergencyContact(contactId: string): void {
    this.emergencyContacts = this.emergencyContacts.filter(c => c.id !== contactId);
    this.saveEmergencyContacts();
  }

  public getEmergencyContacts(): EmergencyContact[] {
    return [...this.emergencyContacts];
  }

  public async sendSOSAlert(userName: string, language: Language = 'en'): Promise<EmergencyAlert> {
    // Update current location
    try {
      const position = await this.getCurrentPosition();
      this.currentLocation = {
        latitude: position.coords.latitude,
        longitude: position.coords.longitude,
        accuracy: position.coords.accuracy,
        timestamp: new Date()
      };
      await this.reverseGeocode(this.currentLocation);
    } catch (error) {
      console.error('Could not get current location for SOS:', error);
    }

    if (!this.currentLocation) {
      throw new Error('Location not available for emergency alert');
    }

    const template = this.emergencyTemplates[language]?.sos || this.emergencyTemplates.en.sos;
    const message = this.formatMessage(template, {
      userName,
      location: this.currentLocation.address || `${this.currentLocation.latitude.toFixed(6)}, ${this.currentLocation.longitude.toFixed(6)}`,
      time: new Date().toLocaleString()
    });

    const alert: EmergencyAlert = {
      id: Date.now().toString(),
      userId: userName,
      location: this.currentLocation,
      message,
      timestamp: new Date(),
      contacts: [...this.emergencyContacts],
      language,
      severity: 'emergency'
    };

    // Send SMS to all emergency contacts
    await this.sendSMSToContacts(message, this.emergencyContacts);

    // Store alert for tracking
    this.storeAlert(alert);

    return alert;
  }

  public async sendSafetyAlert(userName: string, reason: string, language: Language = 'en'): Promise<EmergencyAlert> {
    if (!this.currentLocation) {
      await this.initializeLocationTracking();
    }

    if (!this.currentLocation) {
      throw new Error('Location not available for safety alert');
    }

    const template = this.emergencyTemplates[language]?.safetyAlert || this.emergencyTemplates.en.safetyAlert;
    const message = this.formatMessage(template, {
      userName,
      location: this.currentLocation.address || `${this.currentLocation.latitude.toFixed(6)}, ${this.currentLocation.longitude.toFixed(6)}`,
      time: new Date().toLocaleString()
    });

    const alert: EmergencyAlert = {
      id: Date.now().toString(),
      userId: userName,
      location: this.currentLocation,
      message,
      timestamp: new Date(),
      contacts: this.emergencyContacts.filter(c => c.isPrimary), // Only primary contacts for safety alerts
      language,
      severity: 'high'
    };

    await this.sendSMSToContacts(message, alert.contacts);
    this.storeAlert(alert);

    return alert;
  }

  public async sendCheckIn(userName: string, language: Language = 'en'): Promise<EmergencyAlert> {
    if (!this.currentLocation) {
      await this.initializeLocationTracking();
    }

    if (!this.currentLocation) {
      throw new Error('Location not available for check-in');
    }

    const template = this.emergencyTemplates[language]?.checkIn || this.emergencyTemplates.en.checkIn;
    const message = this.formatMessage(template, {
      userName,
      location: this.currentLocation.address || `${this.currentLocation.latitude.toFixed(6)}, ${this.currentLocation.longitude.toFixed(6)}`,
      time: new Date().toLocaleString()
    });

    const alert: EmergencyAlert = {
      id: Date.now().toString(),
      userId: userName,
      location: this.currentLocation,
      message,
      timestamp: new Date(),
      contacts: this.emergencyContacts.filter(c => c.isPrimary), // Only primary contacts for check-ins
      language,
      severity: 'low'
    };

    await this.sendSMSToContacts(message, alert.contacts);
    this.storeAlert(alert);

    return alert;
  }

  private formatMessage(template: string, variables: Record<string, string>): string {
    let formatted = template;
    Object.entries(variables).forEach(([key, value]) => {
      formatted = formatted.replace(new RegExp(`{${key}}`, 'g'), value);
    });
    return formatted;
  }

  private async sendSMSToContacts(message: string, contacts: EmergencyContact[]): Promise<void> {
    // In a real application, this would integrate with an SMS service like Twilio
    // For demo purposes, we'll simulate SMS sending
    
    console.log('ЁЯУ▒ Sending SMS to emergency contacts:');
    console.log('Message:', message);
    console.log('Contacts:', contacts.map(c => `${c.name} (${c.phone})`));

    // Simulate SMS sending delay
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Show browser notification as SMS simulation
    if ('Notification' in window && Notification.permission === 'granted') {
      contacts.forEach(contact => {
        new Notification(`SMS sent to ${contact.name}`, {
          body: `Emergency message sent to ${contact.phone}`,
          icon: '/favicon.ico',
          tag: `sms-${contact.id}`
        });
      });
    }

    // Store sent messages for tracking
    const sentMessages = {
      timestamp: new Date().toISOString(),
      message,
      contacts: contacts.map(c => ({ name: c.name, phone: c.phone }))
    };
    
    const existing = JSON.parse(localStorage.getItem('sent-sms') || '[]');
    existing.unshift(sentMessages);
    // Keep only last 50 messages
    if (existing.length > 50) {
      existing.splice(50);
    }
    localStorage.setItem('sent-sms', JSON.stringify(existing));
  }

  private storeAlert(alert: EmergencyAlert): void {
    const existing = JSON.parse(localStorage.getItem('emergency-alerts') || '[]');
    existing.unshift(alert);
    // Keep only last 100 alerts
    if (existing.length > 100) {
      existing.splice(100);
    }
    localStorage.setItem('emergency-alerts', JSON.stringify(existing));
  }

  public getAlertHistory(): EmergencyAlert[] {
    const alerts = JSON.parse(localStorage.getItem('emergency-alerts') || '[]');
    return alerts.map((alert: any) => ({
      ...alert,
      timestamp: new Date(alert.timestamp),
      location: {
        ...alert.location,
        timestamp: new Date(alert.location.timestamp)
      }
    }));
  }

  public getSentSMSHistory(): any[] {
    return JSON.parse(localStorage.getItem('sent-sms') || '[]');
  }

  // Request notification permission for SMS simulation
  public async requestNotificationPermission(): Promise<void> {
    if ('Notification' in window && Notification.permission === 'default') {
      await Notification.requestPermission();
    }
  }

  // Monitor battery level for low battery alerts
  public initializeBatteryMonitoring(userName: string, language: Language = 'en'): void {
    if ('getBattery' in navigator) {
      (navigator as any).getBattery().then((battery: any) => {
        const checkBattery = () => {
          if (battery.level < 0.15 && !battery.charging) {
            this.sendLowBatteryAlert(userName, language);
          }
        };

        battery.addEventListener('levelchange', checkBattery);
        battery.addEventListener('chargingchange', checkBattery);
        checkBattery(); // Initial check
      });
    }
  }

  private async sendLowBatteryAlert(userName: string, language: Language): Promise<void> {
    // Only send once per session to avoid spam
    const lastAlert = localStorage.getItem('last-battery-alert');
    const now = Date.now();
    if (lastAlert && now - parseInt(lastAlert) < 3600000) { // 1 hour
      return;
    }

    if (!this.currentLocation) {
      await this.initializeLocationTracking();
    }

    const template = this.emergencyTemplates[language]?.lowBattery || this.emergencyTemplates.en.lowBattery;
    const message = this.formatMessage(template, {
      userName,
      location: this.currentLocation?.address || 'Location unavailable',
      time: new Date().toLocaleString()
    });

    await this.sendSMSToContacts(message, this.emergencyContacts.filter(c => c.isPrimary));
    localStorage.setItem('last-battery-alert', now.toString());
  }
}

// Export singleton instance
export const smsService = new SMSService();
export default smsService;
